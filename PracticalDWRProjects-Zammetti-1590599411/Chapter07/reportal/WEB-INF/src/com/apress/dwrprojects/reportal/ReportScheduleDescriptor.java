package com.apress.dwrprojects.reportal;


import java.sql.Time;


/**
 * This is a simple VO class that describes a report's scheduling information.
 *
 * @author <a href="mailto:fzammetti@omnytex.com">Frank W. Zammetti</a>.
 */
public class ReportScheduleDescriptor {


  /**
   * The name of the report.
   */
  private String reportName;


  /**
   * The name of the user who schedule the report.
   */
  private String scheduledBy;


  /**
   * The list of the days of the week the report runs on.
   */
  private String daysOfWeek;


  /**
   * The time the report runs each day.
   */
  private Time runTime;


  /**
   * The date/time of the last report run.
   */
  private String lastRun;


  /**
   * The outcome of the last run.
   */
  private String lastRunStatus;


  /**
   * The HTML generated by the last run.
   */
  private String lastRunHTML;


  /**
   * Mutator for reportName.
   *
   * @param inReportName New value for reportName.
   */
  public void setReportName(final String inReportName) {

    reportName = inReportName;

  } // End setReportName().


  /**
   * Accessor for reportName.
   *
   * @return Value of reportName.
   */
  public String getReportName() {

    return reportName;

  } // End getReportName().


  /**
   * Mutator for scheduledBy.
   *
   * @param inScheduledBy New value for scheduledBy.
   */
  public void setScheduledBy(final String inScheduledBy) {

    scheduledBy = inScheduledBy;

  } // End setScheduledBy().


  /**
   * Accessor for scheduledBy.
   *
   * @return Value of scheduledBy.
   */
  public String getScheduledBy() {

    return scheduledBy;

  } // End getScheduledBy().


  /**
   * Mutator for daysOfWeek.
   *
   * @param inDaysOfWeek New value for daysOfWeek.
   */
  public void setDaysOfWeek(final String inDaysOfWeek) {

    daysOfWeek = inDaysOfWeek;

  } // End setDaysOfWeek().


  /**
   * Accessor for daysOfWeek.
   *
   * @return Value of daysOfWeek.
   */
  public String getDaysOfWeek() {

    return daysOfWeek;

  } // End getDaysOfWeek().


  /**
   * Mutator for runTime.
   *
   * @param inRunTime New value for runTime.
   */
  public void setRunTime(final Time inRunTime) {

    runTime = inRunTime;

  } // End setRunTime().


  /**
   * Accessor for runTime.
   *
   * @return Value of runTime.
   */
  public Time getRunTime() {

    return runTime;

  } // End getRunTime().


  /**
   * Mutator for lastRun.
   *
   * @param inLastRun New value for lastRun.
   */
  public void setLastRun(final String inLastRun) {

    lastRun = inLastRun;

  } // End setLastRun().


  /**
   * Accessor for lastRun.
   *
   * @return Value of lastRun.
   */
  public String getLastRun() {

    return lastRun;

  } // End getLastRun().


  /**
   * Mutator for lastRunStatus.
   *
   * @param inLastRunStatus New value for lastRunStatus.
   */
  public void setLastRunStatus(final String inLastRunStatus) {

    lastRunStatus = inLastRunStatus;

  } // End setLastRunStatus().


  /**
   * Accessor for lastRunStatus.
   *
   * @return Value of lastRunStatus.
   */
  public String getLastRunStatus() {

    return lastRunStatus;

  } // End getLastRunStatus().


  /**
   * Mutator for lastRunHTML.
   *
   * @param inLastRunHTML New value for lastRunHTML.
   */
  public void setLastRunHTML(final String inLastRunHTML) {

    lastRunHTML = inLastRunHTML;

  } // End setLastRunHTML().


  /**
   * Accessor for lastRunHTML.
   *
   * @return Value of lastRunHTML.
   */
  public String getLastRunHTML() {

    return lastRunHTML;

  } // End getLastRunHTML().


  /**
   * Overriden toString method.
   *
   * @return A reflexively-built string representation of this bean.
   */
  public String toString() {

    String str = null;
    StringBuffer sb = new StringBuffer(1000);
    sb.append("[").append(super.toString()).append("]={");
    boolean firstPropertyDisplayed = false;
    try {
      java.lang.reflect.Field[] fields = this.getClass().getDeclaredFields();
      for (int i = 0; i < fields.length; i++) {
        if (firstPropertyDisplayed) {
          sb.append(", ");
        } else {
          firstPropertyDisplayed = true;
        }
        sb.append(fields[i].getName()).append("=").append(fields[i].get(this));
      }
      sb.append("}");
      str = sb.toString().trim();
    } catch (IllegalAccessException iae) {
      iae.printStackTrace();
    }
    return str;

  } // End toString().


} // End class.
